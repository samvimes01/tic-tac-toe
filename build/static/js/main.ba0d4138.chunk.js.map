{"version":3,"sources":["Scoreboard.js","Tic-tac-toe.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Scoreboard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","newGame","renderScore","bind","assertThisInitialized","react_default","a","createElement","className","data-versus","gameMode","data-first-move","winner","noWinner","nextMove","onClick","Component","MOVE_X","winPositions","TicTacToe","isNewGame","isGameStarted","isPcPlay","player","cells","Array","fill","currentTurn","scoreboard","React","createRef","restart","reset","handleMove","move","event","target","dataset","versus","current","setState","firstMove","alert","field","ReactDOM","findDOMNode","querySelector","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","childNodes","Symbol","iterator","next","done","value","textContent","err","return","_i","length","position","_ref","toConsumableArray","b","c","cell","closest","index","_this2","mark","getWinner","cellArray","map","ind","key","data-index","src_Scoreboard","ref","App","loadGame","startGame","Tic_tac_toe","src","logo","alt","Boolean","window","location","hostname","match","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.ba0d4138.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Scoreboard extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      newGame: props.newGame,\r\n    }\r\n\r\n    this.renderScore = this.renderScore.bind(this);\r\n  }\r\n\r\n  renderScore() {\r\n    if (this.state.newGame) {\r\n      // знаю что плохо - но если через setState - то будет бесконечный рендер\r\n      this.state.newGame = false;\r\n\r\n      return (\r\n      <span>\r\n        <span className=\"vs\" data-versus=\"hum\">VS Human</span>\r\n        <span className=\"vs\" data-versus=\"pc\">VS PC</span>\r\n      </span>\r\n      );\r\n    }\r\n    if (this.state.gameMode) {\r\n      this.state.gameMode = false;\r\n      \r\n      return (\r\n      <span>\r\n        <span>First move: </span>\r\n        <span className=\"vs\" data-first-move=\"pc\">PC</span>\r\n        <span className=\"vs\" data-first-move=\"hum\">Human</span>\r\n      </span>\r\n      );\r\n    }\r\n    if (this.state.winner) {\r\n      return (\r\n      <h3>The winner is: {this.state.winner}</h3>\r\n      );\r\n    }\r\n    if (this.state.noWinner) {\r\n      return (\r\n      <h3>Nobody wins</h3>\r\n      );\r\n    }\r\n    if (this.state.nextMove) {\r\n      return (\r\n      <p>next move: <span>{this.state.nextMove}</span></p>\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Scoreboard\" onClick={this.props.gameMode}>\r\n        {this.renderScore()}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default Scoreboard;","import React, { Component } from 'react';\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport Scoreboard from './Scoreboard';\r\n\r\nconst VS_HUM = 123;\r\nconst VS_PC = 101;\r\nconst MOVE_X = 'X';\r\nconst MOVE_0 = '0';\r\nconst winPositions = [\"012\", \"036\", \"048\", \"147\", \"246\", \"258\", \"345\", \"678\"];\r\n\r\nclass TicTacToe extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      isNewGame: true,\r\n      isGameStarted: false,\r\n      winner: null,\r\n      isPcPlay: false,\r\n      gameMode: false,\r\n      nextMove: MOVE_X,\r\n      player: MOVE_X,\r\n      cells: Array(9).fill(null),\r\n      currentTurn: 1,\r\n    };\r\n\r\n    this.scoreboard = React.createRef();\r\n\r\n    this.gameMode = this.gameMode.bind(this);\r\n    this.restart = this.restart.bind(this);\r\n    this.reset = this.reset.bind(this);\r\n    this.handleMove = this.handleMove.bind(this);\r\n    this.move = this.move.bind(this);\r\n\r\n    // todo - logic for pc move\r\n    // this.moveFromPc = this.moveFromPc.bind(this);\r\n    // this.findNextWin = this.findNextWin.bind(this);\r\n    // this.getRandomInt = this.getRandomInt.bind(this);\r\n\r\n\r\n  }\r\n\r\n  gameMode(event) {\r\n    if (event.target.dataset.versus === 'hum') {\r\n      this.scoreboard.current.setState({nextMove: this.state.nextMove});\r\n\r\n      this.setState({\r\n        gameMode: VS_HUM,\r\n        isPcPlay: false,\r\n        isGameStarted: true,\r\n      });\r\n    } else if (event.target.dataset.versus === 'pc') {\r\n      this.scoreboard.current.setState({gameMode: VS_PC});\r\n      this.setState({\r\n        gameMode: VS_PC,\r\n        isPcPlay: true,\r\n        isGameStarted: false, // true when impl\r\n      });      \r\n    } else if (event.target.dataset.firstMove === 'pc') {\r\n      // this.moveFromPc();\r\n      alert('sorry - I need more time to implement PC move');\r\n    } else if (event.target.dataset.firstMove === 'hum') {\r\n      alert('sorry - I need more time to implement PC move');\r\n      // this.scoreboard.current.setState({nextMove: this.state.nextMove});\r\n    }\r\n  }\r\n\r\n  restart() {\r\n    this.reset();\r\n\r\n    this.scoreboard.current.setState({\r\n      newGame: true,\r\n      winner: null,\r\n      noWinner: null,\r\n    });\r\n\r\n    const field = ReactDOM.findDOMNode(this).querySelector('.field');\r\n    for (let cell of field.childNodes) {\r\n      cell.textContent = '';\r\n    }\r\n  }\r\n\r\n  reset() {\r\n    this.setState({\r\n      isNewGame: true,\r\n      isGameStarted: false,\r\n      winner: null,\r\n      isPcPlay: false,\r\n      gameMode: false,\r\n      nextMove: MOVE_X,\r\n      player: MOVE_X,\r\n      cells: Array(9).fill(null),\r\n      currentTurn: 1,\r\n    });\r\n  }\r\n\r\n  getWinner() {\r\n    for (let position of winPositions) {\r\n      const [a, b, c] = [...position];\r\n\r\n      if (\r\n        this.state.cells[a] !== null &&\r\n        this.state.cells[a] === this.state.cells[b] &&\r\n        this.state.cells[b] === this.state.cells[c]\r\n      ) {\r\n      this.scoreboard.current.setState({winner: this.state.cells[a]});\r\n        return this.state.cells[a];\r\n      }\r\n    }\r\n\r\n    if (this.state.currentTurn === 9) {\r\n      this.scoreboard.current.setState({noWinner: true});\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  handleMove(event) {\r\n    const cell = event.target.closest(\"[data-index]\");\r\n\r\n    if (!cell || !this.state.isGameStarted) {\r\n      return;\r\n    }\r\n\r\n    const index = cell.dataset.index;\r\n\r\n    this.move(index);\r\n  }\r\n\r\n  move(index) {\r\n    if (this.state.cells[index] !== null) {\r\n      return;\r\n    }\r\n\r\n    if (this.state.winner !== null) {\r\n      return;\r\n    }\r\n\r\n    const mark = this.state.currentTurn % 2 === 1 ? MOVE_X : MOVE_0;\r\n    \r\n    this.state.cells[index] = mark;\r\n    \r\n    this.setState(state => {\r\n      return {\r\n        currentTurn: state.currentTurn + 1,\r\n        winner: this.getWinner(),\r\n      };\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const  cellArray = this.state.cells.map((cell, ind) => {\r\n      return (<div key={ind} data-index={ind} className=\"cell\">{cell || ''}</div>);\r\n    });\r\n\r\n    return (\r\n      <div className=\"Game\">\r\n        <header className=\"Game-header\">\r\n          <p>\r\n            Tic Tac Toe game.\r\n          </p>\r\n        </header>\r\n        <main className=\"Game-main\">\r\n\r\n          <Scoreboard newGame={this.state.isNewGame} gameMode={this.gameMode} ref={this.scoreboard}/>\r\n\r\n          <div className=\"field\" onClick={this.handleMove}>\r\n            {cellArray}\r\n          </div>\r\n\r\n          <div className=\"restart\">\r\n              <span onClick={this.restart}>restart</span>\r\n          </div>\r\n\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default TicTacToe;","import React, { Component } from 'react';\r\nimport TicTacToe from './Tic-tac-toe';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      loadGame: false,\r\n    }\r\n    this.startGame = this.startGame.bind(this);\r\n  }\r\n\r\n\r\n  startGame() {\r\n    this.setState( {loadGame: true} );\r\n  }\r\n\r\n  render() {\r\n    if (this.state.loadGame) {\r\n      return (\r\n        <TicTacToe />\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <p>\r\n            Tic Tac Toe game.\r\n          </p>\r\n          <button\r\n            className=\"App-start-game-button\"\r\n            onClick={this.startGame}\r\n          >\r\n            Start Game\r\n          </button>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}