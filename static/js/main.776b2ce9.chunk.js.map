{"version":3,"sources":["logo.svg","Tic-tac-toe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MOVE_X","winPositions","TicTacToe","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isNewGame","isGameStarted","winner","isPcPlay","gameMode","nextMove","humanPlayer","pcPlayer","cells","Array","fill","currentTurn","gameSetup","bind","assertThisInitialized","restart","handleMove","move","getScoreBoardMessage","moveFromPc","findNextWin","getRandomInt","event","target","dataset","versus","setState","firstMove","_this$state","_i","length","position","_ref","toConsumableArray","a","b","c","_this$state2","cell","closest","index","setTimeout","_this2","_this$state3","mark","prevState","getWinner","_this$state4","react_default","createElement","className","data-versus","data-first-move","_this$state5","humanWinMove","pcWinMove","emptyCells","map","el","i","filter","letterForCheck","_i2","_ref2","cellValues","potentialWinPosArr","val","emptyPosition","indexOf","min","max","Math","ceil","floor","random","cellArray","ind","key","data-index","onClick","Component","App","loadGame","startGame","Tic_tac_toe","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.776b2ce9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react';\r\n\r\nconst VS_HUM = 0;\r\nconst VS_PC = 1;\r\nconst MOVE_X = 'X';\r\nconst MOVE_0 = '0';\r\nconst winPositions = [\"012\", \"036\", \"048\", \"147\", \"246\", \"258\", \"345\", \"678\"];\r\n\r\nclass TicTacToe extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      isNewGame: true,\r\n      isGameStarted: false,\r\n      winner: null,\r\n      isPcPlay: null,\r\n      gameMode: false,\r\n      nextMove: MOVE_X,\r\n      humanPlayer: null,\r\n      pcPlayer: null,\r\n      cells: Array(9).fill(null),\r\n      currentTurn: 1,\r\n    };\r\n\r\n    this.gameSetup = this.gameSetup.bind(this);\r\n    this.restart = this.restart.bind(this);\r\n    this.handleMove = this.handleMove.bind(this);\r\n    this.move = this.move.bind(this);\r\n    this.getScoreBoardMessage = this.getScoreBoardMessage.bind(this);\r\n    \r\n    this.moveFromPc = this.moveFromPc.bind(this);\r\n    this.findNextWin = this.findNextWin.bind(this);\r\n    this.getRandomInt = this.getRandomInt.bind(this);\r\n\r\n\r\n  }\r\n\r\n  gameSetup(event) {\r\n    if (event.target.dataset.versus === 'hum') {\r\n      this.setState({\r\n        gameMode: VS_HUM,\r\n        isPcPlay: false,\r\n        isGameStarted: true,\r\n        isNewGame: false,\r\n      });\r\n    } else if (event.target.dataset.versus === 'pc') {\r\n      this.setState({\r\n        gameMode: VS_PC,\r\n        isPcPlay: true,\r\n        isNewGame: false,\r\n      });      \r\n    } else if (event.target.dataset.firstMove === 'pc') {\r\n      this.setState({\r\n        humanPlayer: MOVE_0,\r\n        pcPlayer: MOVE_X,\r\n        isGameStarted: true, // true when impl\r\n      });   \r\n      this.moveFromPc();\r\n      // alert('sorry - I need more time to implement PC move');\r\n    } else if (event.target.dataset.firstMove === 'hum') {\r\n      this.setState({\r\n        humanPlayer: MOVE_X,\r\n        pcPlayer: MOVE_0,\r\n        isGameStarted: true, // true when impl\r\n      });  \r\n      // alert('sorry - I need more time to implement PC move');\r\n    }\r\n  }\r\n\r\n  restart() {\r\n    this.setState({\r\n      isNewGame: true,\r\n      isGameStarted: false,\r\n      winner: null,\r\n      isPcPlay: null,\r\n      gameMode: false,\r\n      nextMove: MOVE_X,\r\n      humanPlayer: null,\r\n      pcPlayer: null,\r\n      cells: Array(9).fill(null),\r\n      currentTurn: 1,\r\n    });\r\n  }\r\n\r\n  getWinner() {\r\n    const { cells, currentTurn } = this.state;\r\n\r\n    for (let position of winPositions) {\r\n      const [a, b, c] = [...position];\r\n\r\n      if (\r\n        cells[a] !== null &&\r\n        cells[a] === cells[b] &&\r\n        cells[b] === cells[c]\r\n      ) {\r\n        return cells[a];\r\n      }\r\n    }\r\n\r\n    if (currentTurn === 9) {\r\n      return 'draw'\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  handleMove(event) {\r\n    const { isGameStarted, gameMode } = this.state;\r\n\r\n\r\n    const cell = event.target.closest(\"[data-index]\");\r\n\r\n    if (!cell || !isGameStarted) {\r\n      return;\r\n    }\r\n\r\n    const index = +cell.dataset.index;\r\n\r\n    this.move(index);\r\n\r\n    if (gameMode === VS_PC) {\r\n      setTimeout(this.moveFromPc, 200);\r\n    }\r\n  }\r\n\r\n  move(index) {\r\n    const { cells, winner, currentTurn } = this.state;\r\n\r\n    if (cells[index] !== null) {\r\n      return;\r\n    }\r\n\r\n    if (winner) {\r\n      return;\r\n    }\r\n\r\n    let mark = currentTurn % 2 === 1 ? MOVE_X : MOVE_0;\r\n    \r\n    // если через setState - в scoreBoard не рендерится winner даже если 2 setState сделать отдельно дя winner\r\n    this.state.cells[index] = mark;\r\n    \r\n    this.setState(prevState => {\r\n      return {\r\n        currentTurn: prevState.currentTurn + 1,\r\n        winner: this.getWinner(),\r\n        nextMove: mark === MOVE_0 ? MOVE_X : MOVE_0,\r\n      };\r\n    });\r\n  }\r\n\r\n  getScoreBoardMessage() {\r\n    const {\r\n      isNewGame, gameMode, winner, nextMove, isGameStarted\r\n    } = this.state;\r\n\r\n    if (isNewGame) {\r\n      return (\r\n      <span>\r\n        <span className=\"vs\" data-versus=\"hum\">VS Human</span>\r\n        <span className=\"vs\" data-versus=\"pc\">VS PC</span>\r\n      </span>\r\n      );\r\n    }\r\n\r\n    if (gameMode === VS_PC && !isGameStarted) {\r\n      return (\r\n      <span>\r\n        <span>First move: </span>\r\n        <span className=\"vs\" data-first-move=\"pc\">PC</span>\r\n        <span className=\"vs\" data-first-move=\"hum\">Human</span>\r\n      </span>\r\n      );\r\n    }\r\n    if (winner && winner !== 'draw') {\r\n      return (\r\n      <h3>The winner is: {winner}</h3>\r\n      );\r\n    }\r\n\r\n    if (winner === 'draw') {\r\n      return (\r\n      <h3>Nobody wins</h3>\r\n      );\r\n    }\r\n\r\n    if (nextMove) {\r\n      return (\r\n      <p>next move: <span>{nextMove}</span></p>\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  moveFromPc() {\r\n    const { humanPlayer, pcPlayer, cells } = this.state;\r\n    let index;\r\n    const humanWinMove = this.findNextWin(humanPlayer);\r\n    if (humanWinMove >= 0) {\r\n      index = humanWinMove;\r\n    } else {\r\n      const pcWinMove = this.findNextWin(pcPlayer);\r\n  \r\n      if (pcWinMove >= 0) {\r\n        index = pcWinMove;\r\n      } else {\r\n        const emptyCells = cells.map(\r\n          (el, i) => {\r\n            if (!el) {\r\n              return i\r\n            };\r\n            return null;\r\n          }\r\n        ).filter(el => el);\r\n  \r\n        // if (emptyCells.length === 0) {\r\n        //   this.scoreboard.innerHTML = '<h3>Nobody wins</h3>';\r\n        //   return;\r\n        // }\r\n        index = emptyCells[this.getRandomInt(0, emptyCells.length)];\r\n      }\r\n    }\r\n    // setTimeout(this.move(index), 2000);\r\n  \r\n    this.move(index);\r\n  }\r\n  \r\n  findNextWin(letterForCheck) {\r\n    const { cells } = this.state;\r\n\r\n    for (let position of winPositions) {\r\n      const [a, b, c] = [...position];\r\n\r\n      const cellValues = [ cells[a], cells[b], cells[c] ];\r\n      const potentialWinPosArr = cellValues.filter(val => val === letterForCheck);\r\n      const emptyPosition = cellValues.indexOf(null);\r\n\r\n      if (emptyPosition >= 0 && potentialWinPosArr.length === 2) {\r\n        return position[emptyPosition];\r\n      }\r\n    }\r\n\r\n    return -1;\r\n  }\r\n  \r\n  getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n  }\r\n\r\n  render() {\r\n    const  cellArray = this.state.cells.map((cell, ind) => {\r\n      return (<div key={ind} data-index={ind} className=\"cell\">{cell || ''}</div>);\r\n    });\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <header className=\"game-header\">\r\n          <p>\r\n            Tic Tac Toe game.\r\n          </p>\r\n        </header>\r\n        <main className=\"game-main\">\r\n\r\n          <div className=\"scoreboard\" onClick={this.gameSetup}>\r\n            {this.getScoreBoardMessage()}\r\n          </div>\r\n\r\n          <div className=\"field\" onClick={this.handleMove}>\r\n            {cellArray}\r\n          </div>\r\n\r\n          <div className=\"restart\">\r\n              <span onClick={this.restart}>restart</span>\r\n          </div>\r\n\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default TicTacToe;","import React, { Component } from 'react';\r\nimport TicTacToe from './Tic-tac-toe';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      loadGame: false,\r\n    }\r\n    this.startGame = this.startGame.bind(this);\r\n  }\r\n\r\n\r\n  startGame() {\r\n    this.setState( {loadGame: true} );\r\n  }\r\n\r\n  render() {\r\n    if (this.state.loadGame) {\r\n      return (\r\n        <TicTacToe />\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"app\">\r\n        <header className=\"app-header\">\r\n          <img src={logo} className=\"app-logo\" alt=\"logo\" />\r\n          <p>\r\n            Tic Tac Toe game.\r\n          </p>\r\n          <button\r\n            className=\"app-start-game-button\"\r\n            onClick={this.startGame}\r\n          >\r\n            Start Game\r\n          </button>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}